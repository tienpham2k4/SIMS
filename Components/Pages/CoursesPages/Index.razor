@page "/courses"

@using Microsoft.EntityFrameworkCore
@using BlazorApp3.Models
@inject IDbContextFactory<BlazorApp3.Data.ApplicationDbContext> DbFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Courses</PageTitle>

<h1>Courses</h1>

@if (BlazorApp3.Components.Layout.NavMenu.isAdmin)
{
    <p>
        <a href="courses/create" class="btn btn-success"> Create New Courses</a>
    </p>
}

<table class="table">
    <thead>
        <tr>
            <th>Course Name</th>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Semester</th>
            <th>Lecture</th>
            <th>Subject</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var course in Courses)
        {
            <tr>
                <td>@course.Name</td>
                <td>@course.StartDate.ToShortDateString()</td>
                <td>@course.EndDate.ToShortDateString()</td>
                <td>@course.Semester.Name</td>
                <td>@course.Lecture.Name</td>
                <td>@course.Subject.Name</td>
                <td>
                    @if (BlazorApp3.Components.Layout.NavMenu.isAdmin)
                    {
                        <div style="display: flex; justify-content: center; align-items: center; gap: 10px;">
                            <a href="@($"courses/edit?id={course.Id}")"><i class="fa-solid fa-pen-to-square"></i></a>
                            <a href="@($"courses/details?id={course.Id}")"><i class="fa-solid fa-circle-info"></i></a>
                            <a href="@($"courses/delete?id={course.Id}")"><i class="fa-solid fa-trash"></i></a>

                            <!-- Buttons placed in between icons -->
                            <a href="@($"courses/assign?id={course.Id}")"
                               style="display: inline-block; padding: 4px 8px; background-color: #4CAF50; color: white; text-align: center; text-decoration: none; border-radius: 4px; font-size: 14px; transition: background-color 0.3s ease;">
                                Assign students
                            </a>
                            <a href="@($"courses/grade?id={course.Id}")"
                               style="display: inline-block; padding: 4px 8px; background-color: #4CAF50; color: white; text-align: center; text-decoration: none; border-radius: 4px; font-size: 14px; transition: background-color 0.3s ease;">
                                Add Grades
                            </a>
                        </div>
                    }
                </td>

            </tr>
        }
    </tbody>
</table>

@code {
        private List<Courses> Courses { get; set; } = new List<Courses>();
private bool IsAdmin { get; set; }

protected override async Task OnInitializedAsync()
{
        using var context = DbFactory.CreateDbContext();

        Courses = await context.Courses
            .Include(m => m.Semester)
            .Include(m => m.Subject)
            .Include(m => m.Lecture)
            .ToListAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        IsAdmin = user.Claims.Any(c => c.Type == "Role" && c.Value == "Admin");
}
}
